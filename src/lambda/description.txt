Lambda expressions basically express instances of functional interfaces 
(An interface with single abstract method is called functional interface. An example is java.lang.Runnable). 
lambda expressions implement the only abstract function and therefore implement functional interfaces.

Zero parameter:
() -> System.out.println("Zero parameter lambda");
One parameter:–
(p) -> System.out.println("One parameter: " + p);
It is not mandatory to use parentheses, if the type of that variable can be inferred from the context

Multiple parameters :
(p1, p2) -> System.out.println("Multiple parameters: " + p1 + ", " + p2);


A lambda expression is characterized by the following syntax.

parameter -> expression body
Following are the important characteristics of a lambda expression.

Optional type declaration − No need to declare the type of a parameter. The compiler can inference the same from the value of the parameter.

Optional parenthesis around parameter − No need to declare a single parameter in parenthesis. For multiple parameters, parentheses are required.

Optional curly braces − No need to use curly braces in expression body if the body contains a single statement.

Optional return keyword − The compiler automatically returns the value if the body has a single expression to return the value. 
Curly braces are required to indicate that expression returns a value.